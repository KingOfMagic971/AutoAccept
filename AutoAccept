# AutoAccept
–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–µ –≥–¥–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
# -*- coding: utf-8 -*-
# meta developer: @Rezoxss
# scope: hikka_only

from .. import loader, utils
import logging
from telethon.tl.types import Message, ChannelParticipantsAdmins, ChatBannedRights
from telethon.tl.functions.channels import EditBannedRequest
from telethon.tl.functions.messages import HideChatJoinRequestRequest, GetBotCallbackAnswerRequest

logger = logging.getLogger(__name__)

@loader.tds
class AutoAcceptMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –≤ —á–∞—Ç–∞—Ö"""
    
    strings = {
        "name": "AutoAccept",
        "no_admin": "<b>üö´ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã</b>",
        "enabled": "<b>‚úÖ –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –≤–∫–ª—é—á–µ–Ω–æ</b>",
        "disabled": "<b>‚ùå –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>",
        "already_enabled": "<b>‚ö†Ô∏è –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ</b>",
        "already_disabled": "<b>‚ö†Ô∏è –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>",
        "no_chat": "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö"
    }

    def __init__(self):
        self.active_chats = set()

    async def client_ready(self, client, db):
        self._client = client

    async def is_admin(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            participants = await self._client.get_participants(chat_id, filter=ChannelParticipantsAdmins)
            me = await self._client.get_me()
            return any(participant.id == me.id for participant in participants)
        except Exception as e:
            logger.error(f"Admin check error: {e}")
            return False

    async def can_manage_chat(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            chat = await self._client.get_entity(chat_id)
            if hasattr(chat, 'default_banned_rights'):
                return not chat.default_banned_rights.invite_users
            return True
        except Exception as e:
            logger.error(f"Manage check error: {e}")
            return False

    @loader.command()
    async def autoadd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ - .autoadd on/off"""
        chat_id = utils.get_chat_id(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∞—Ç, –∞ –Ω–µ –õ–°
        if chat_id > 0:
            await utils.answer(message, self.strings("no_chat"))
            return
        
        args = utils.get_args_raw(message).lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.is_admin(chat_id):
            await utils.answer(message, self.strings("no_admin"))
            return
            
        if not await self.can_manage_chat(chat_id):
            await utils.answer(message, self.strings("no_admin"))
            return
        
        if args == "on":
            if chat_id in self.active_chats:
                await utils.answer(message, self.strings("already_enabled"))
            else:
                self.active_chats.add(chat_id)
                await utils.answer(message, self.strings("enabled"))
                
        elif args == "off":
            if chat_id not in self.active_chats:
                await utils.answer(message, self.strings("already_disabled"))
            else:
                self.active_chats.discard(chat_id)
                await utils.answer(message, self.strings("disabled"))
                
        else:
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if chat_id in self.active_chats else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
            help_text = (
                f"<b>‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏—è:</b> {status}\n\n"
                "<b>üìã –ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "<code>.autoadd on</code> - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ\n"
                "<code>.autoadd off</code> - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ\n\n"
                "<b>üí° –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞:</b>\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏"
            )
            await utils.answer(message, help_text)

    @loader.watcher()
    async def join_request_watcher(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"""
        try:
            chat_id = utils.get_chat_id(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            if chat_id not in self.active_chats:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            if hasattr(message, 'action') and message.action:
                if message.action.__class__.__name__ == 'MessageActionChatJoinRequest':
                    user_id = message.action.user_id
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É
                    try:
                        # –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
                        await self._client(HideChatJoinRequestRequest(
                            peer=chat_id,
                            user_id=user_id,
                            approved=True
                        ))
                        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ join_request_watcher: {e}")

    @loader.watcher()
    async def new_member_watcher(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è —á–∞—Ç–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –≤—Ö–æ–¥–æ–º)"""
        try:
            chat_id = utils.get_chat_id(message)
            
            if chat_id not in self.active_chats:
                return
                
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if hasattr(message, 'action') and message.action:
                action_name = message.action.__class__.__name__
                if action_name in ['MessageActionChatAddUser', 'MessageActionChatJoined']:
                    logger.info(f"üë• –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —á–∞—Ç–µ {chat_id}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ new_member_watcher: {e}")

    async def on_unload(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        self.active_chats.clear()
